services:
  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile.dev
    container_name: auth_service
    depends_on:
      - auth_service_db_init
    volumes:
      - ./auth_service:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
      - sqlite_db_data:/sqlite_db_data
      - static_data:/static_data
    networks:
      - transcendence

  file_upload_service:
    build:
      context: ./file_upload_service
      dockerfile: Dockerfile.dev
    container_name: file_upload_service
    volumes:
      - ./file_upload_service:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
      - static_data:/static_data
    networks:
      - transcendence

  rabbitmq_publisher_service_dev:
    build:
      context: ./rabbitmq_publisher_service_dev
      dockerfile: Dockerfile.dev
    container_name: rabbitmq_publisher_service
    volumes:
      - ./rabbitmq_publisher_service_dev:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
#      - dashboard_db_data:/dashboard_data - maybe used later for testing and asserting correct entry to the DB
    ports:
      - "3000:3000"
    networks:
      - transcendence

  dashboard_consumer_service:
    build:
      context: ./dashboard_consumer_service
      dockerfile: Dockerfile.dev
    container_name: dashboard_consumer_service
    volumes:
      - ./dashboard_consumer_service:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
      - dashboard_db_data:/dashboard_data
    networks:
      - transcendence

  auth_service_db_init:
    build:
      context: ./auth_service_db_init
      dockerfile: Dockerfile
    container_name: auth_service_db_init
    volumes:
      - sqlite_db_data:/sqlite_db_data
      - dashboard_db_data:/dashboard_db_data
    networks:
      - transcendence

  game_service:
    build:
      context: ./game_service
      dockerfile: Dockerfile.dev
    container_name: game_service
    volumes:
      - ./game_service:/app
      - /app/node_modules  # Anonymous volume for node_modules
    networks:
      - transcendence

  match_service:
    build:
      context: ./match_service
      dockerfile: Dockerfile.dev
    container_name: match_service
    volumes:
      - ./match_service:/app
      - /app/node_modules  # Anonymous volume for node_modules
    networks:
      - transcendence

  rabbitmq_service:
    build:
      context: ./rabbitmq_service
      dockerfile: Dockerfile.dev
    container_name: rabbitmq_service
    hostname: rabbitmq #are you using this for DNS?
    ports:
      - "5672:5672"    # AMQP protocol port
      - "15672:15672"  # Management console port
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - transcendence

  proxy_service:
    build:
      context: ./proxy_service
      dockerfile: Dockerfile.dev
    container_name: proxy_service
    ports:
      - "80:80"
    volumes:
      - frontend_data:/frontend_data
      - static_data:/static_data
      - ./proxy_service:/etc/nginx
    networks:
      - transcendence

  frontend_service:
    build:
      context: ../client
      dockerfile: Dockerfile.dev
    container_name: frontend_builder
    volumes:
      - /app/node_modules # anonymous volume -protect node_modules
      - frontend_data:/frontend_data # named volume for sharing frontend data with proxy_service
      - ../client:/app
    command: >
      bash -c "npm run docker-build && npm run docker-build-css && cp -r /app/* /frontend_data/"
  # build ts, css, copies data to named volume and keeps the container running -removed from the above for live dev && tail -f /dev/null!!!
  db_explorer_service_dashboard:
    build:
      context: ./database_explorer_service
      dockerfile: Dockerfile.dev
    container_name: db_explorer_dashboard
    ports:
      - "8080:8080"
    volumes:
      - dashboard_db_data:/data
    command: [
      "/data/dashboard_service.sqlite",    # Path to your DB file inside /data
      "--host", "0.0.0.0",      # Listen on all interfaces (required for Docker)
      "--port", "8080"
    ]

  db_explorer_service_auth:
      build:
        context: ./database_explorer_service
        dockerfile: Dockerfile.dev
      container_name: db_explorer_auth
      ports:
        - "8090:8090"
      volumes:
            - sqlite_db_data:/data
      command: [
        "/data/auth_service.sqlite",    # Path to your DB file inside /data
        "--host", "0.0.0.0",      # Listen on all interfaces (required for Docker)
        "--port", "8090"
      ]


networks:
  transcendence:
    driver: bridge


volumes:
  # sqlite
  sqlite_db_data:
  # dashboard_service db:
  dashboard_db_data:
  # for avatar/user profile uploads
  static_data:
  # index data
  frontend_data: