services:
  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile.dev
    container_name: auth_service
    depends_on:
      - auth_service_db_init
    volumes:
      - ./auth_service:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
      - auth_db_data:/auth_db_data
      - static_data:/static_data
    networks:
      - transcendence

  file_upload_service:
    build:
      context: ./file_upload_service
      dockerfile: Dockerfile.dev
    container_name: file_upload_service
    volumes:
      - ./file_upload_service:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
      - static_data:/static_data
    networks:
      - transcendence

  rabbitmq_publisher_service_dev:
    build:
      context: ./rabbitmq_publisher_service_dev
      dockerfile: Dockerfile.dev
    container_name: rabbitmq_publisher_service
    volumes:
      - ./rabbitmq_publisher_service_dev:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
#      - dashboard_db_data:/dashboard_data - maybe used later for testing and asserting correct entry to the DB
    ports:
      - "3000:3000"
    networks:
      - transcendence

  dashboard_consumer_service:
    build:
      context: ./dashboard_consumer_service
      dockerfile: Dockerfile.dev
    container_name: dashboard_consumer_service
    volumes:
      - ./dashboard_consumer_service:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
      - dashboard_db_data:/dashboard_data
    networks:
      - transcendence

  dashboard_service:
    build:
      context: ./dashboard_service
      dockerfile: Dockerfile.dev
    container_name: dashboard_service
    volumes:
      - ./dashboard_service:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
      - dashboard_db_data:/dashboard_data
    networks:
      - transcendence

  presence_service:
    build:
      context: ./presence_service
      dockerfile: Dockerfile.dev
    container_name: presence_service
    volumes:
      - ./presence_service:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
    networks:
      - transcendence

  friend_service:
    build:
      context: ./friend_service
      dockerfile: Dockerfile.dev
    container_name: friend_service
    volumes:
      - ./friend_service:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
      - friends_db_data:/friends_db_data
    networks:
      - transcendence

  auth_service_db_init:
    build:
      context: ./auth_service_db_init
      dockerfile: Dockerfile
    container_name: auth_service_db_init
    volumes:
      - auth_db_data:/auth_db_data
      - dashboard_db_data:/dashboard_db_data
      - friends_db_data:/friends_db_data
      - tournament_db_data:/tournament_db_data
    networks:
      - transcendence

  game_service:
    build:
      context: ./game_service
      dockerfile: Dockerfile.dev
    container_name: game_service
    volumes:
      - ./game_service:/app
      - /app/node_modules  # Anonymous volume for node_modules
    networks:
      - transcendence

  splitkeyboard_game_service:
    build:
      context: ./splitkeyboard_game_service
      dockerfile: Dockerfile.dev
    container_name: splitkeyboard_game_service
    volumes:
      - ./splitkeyboard_game_service:/app
      - /app/node_modules  # Anonymous volume for node_modules
    networks:
      - transcendence

  tournament_service:
    build:
      context: ./tournament_service
      dockerfile: Dockerfile.dev
    container_name: tournament_service
    volumes:
      - ./tournament_service:/app
      - /app/node_modules  # Anonymous volume for node_modules
      - tournament_db_data:/tournament_db_data
    networks:
      - transcendence

  rabbitmq_service:
    build:
      context: ./rabbitmq_service
      dockerfile: Dockerfile.dev
    container_name: rabbitmq_service
    ports:
      - "5672:5672"    # AMQP protocol port
      - "15672:15672"  # Management console port
    networks:
      - transcendence

  proxy_service:
    build:
      context: ./proxy_service
      dockerfile: Dockerfile.dev
    container_name: proxy_service
    ports:
      - "80:80"
    volumes:
      - frontend_data:/frontend_data
      - static_data:/static_data
      - ./proxy_service:/etc/nginx
    networks:
      - transcendence

  frontend_service:
    build:
      context: ../client_new
      dockerfile: Dockerfile.dev
    container_name: frontend_builder
    volumes:
      - /app/node_modules # anonymous volume -protect node_modules
      - frontend_data:/frontend_data # named volume for sharing frontend data with proxy_service
      - ../client_new:/app # bind volume
    command: >
      bash -c "npm run docker-build && cp -r /app/dist/* /frontend_data/ && tail -f /dev/null"
  # build ts, css, copies data to named volume and keeps the container running -removed from the above for live dev && tail -f /dev/null!!!

  db_explorer_service_dashboard:
    build:
      context: ./database_explorer_service
      dockerfile: Dockerfile.dev
    container_name: db_explorer_dashboard_dev
    ports:
      - "8080:8080"
    volumes:
      - dashboard_db_data:/data
    command: [
      "/data/dashboard_service.sqlite",    # Path to your DB file inside /data
      "--host", "0.0.0.0",      # Listen on all interfaces (required for Docker)
      "--port", "8080"
    ]

  db_explorer_service_auth:
      build:
        context: ./database_explorer_service
        dockerfile: Dockerfile.dev
      container_name: db_explorer_auth_dev
      ports:
        - "8090:8090"
      volumes:
        - auth_db_data:/data
      command: [
        "/data/auth_service.sqlite",    # Path to your DB file inside /data
        "--host", "0.0.0.0",      # Listen on all interfaces (required for Docker)
        "--port", "8090"
      ]

  db_explorer_service_friends:
    build:
      context: ./database_explorer_service
      dockerfile: Dockerfile.dev
    container_name: db_explorer_friends_dev
    ports:
      - "8100:8100"
    volumes:
      - friends_db_data:/data
    command: [
      "/data/friends_service.sqlite",    # Path to your DB file inside /data
      "--host", "0.0.0.0",      # Listen on all interfaces (required for Docker)
      "--port", "8100"
    ]

  db_explorer_service_tournament:
    build:
      context: ./database_explorer_service
      dockerfile: Dockerfile.dev
    container_name: db_explorer_tournament_dev
    ports:
      - "8110:8110"
    volumes:
      - tournament_db_data:/data
    command: [
      "/data/tournament_service.sqlite",    # Path to your DB file inside /data
      "--host", "0.0.0.0",      # Listen on all interfaces (required for Docker)
      "--port", "8110"
    ]


networks:
  transcendence:
    driver: bridge


volumes:
  # auth service
  auth_db_data:
  # dashboard_service db:
  dashboard_db_data:
  # friends_service db:
  friends_db_data:
  # tournament_service db:
  tournament_db_data:
  # for avatar/user profile uploads
  static_data:
  # index data
  frontend_data: