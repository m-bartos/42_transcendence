events {
    worker_connections 1024;
}

http {
    include mime.types;

    upstream auth_service {
        server auth_service:3000;
    }

    upstream file_upload_service {
        server file_upload_service:3000;
    }

    upstream game_service {
        server game_service:3000;
    }

    upstream match_service {
        server match_service:3000;
    }

    server {
        listen 80;

        # JSON ERRORS
        error_page 404 = @json_404;
        error_page 403 = @json_403;
        error_page 500 502 503 504 = @json_5xx;

        location @json_404 {
            default_type application/json;
            return 404 '{"status": "error", "message": "resource not found"}';
        }

        location @json_403 {
            default_type application/json;
            return 403 '{"status": "error", "message": "forbidden"}';
        }

        location @json_5xx {
            default_type application/json;
            return 500 '{"status": "error", "message": "internal server error"}';
        }
        # END OF JSON ERRORS

        location / {
            root /frontend_data;
            try_files $uri /index.html;
        }

        location /static_data/ {
                    root /;
        }

        client_max_body_size 5M;

        location ~ ^/api/auth/.*internal.* {
            return 404;
        }

        location /api/auth/ {
            proxy_pass http://auth_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy for /api/upload
        location /api/upload/ {
            proxy_pass http://file_upload_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy for /api/game/ (updated for REST + WebSocket)
        location /api/game/ {
            proxy_pass http://game_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Add WebSocket support
            proxy_http_version 1.1;                # Required for WebSocket
            proxy_set_header Upgrade $http_upgrade; # Pass WebSocket upgrade header
            proxy_set_header Connection "upgrade";  # Indicate connection upgrade
        }

        # Proxy for /api/match/ (updated for REST + WebSocket)
        location /api/match/ {
            proxy_pass http://match_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Add WebSocket support
            proxy_http_version 1.1;                # Required for WebSocket
            proxy_set_header Upgrade $http_upgrade; # Pass WebSocket upgrade header
            proxy_set_header Connection "upgrade";  # Indicate connection upgrade
        }

        location /health {
            return 200 "Nginx is running";
            add_header Content-Type text/plain;
        }
    }
}