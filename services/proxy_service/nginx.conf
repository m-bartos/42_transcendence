events {
    worker_connections 1024;
}

http {
    include mime.types;
    resolver 127.0.0.11 valid=1s;

#     load balancing - future
    upstream auth_backend {
        server 127.0.0.1:65535 max_fails=1 fail_timeout=1s;
    }

    server {
        listen 80;
        client_max_body_size 500K;

        # JSON ERRORS
        # JSON Errors - Specific handling for each status
        error_page 404 = @json_404;
        error_page 403 = @json_403;
        error_page 413 = @json_413;
        error_page 500 = @json_500; # Internal server error
        error_page 502 = @json_502; # Bad gateway
        error_page 503 = @json_503; # Service unavailable
        error_page 504 = @json_504; # Gateway timeout

        # 404 - Not Found
        location @json_404 {
            default_type application/json;
            return 404 '{"status": "error", "message": "resource not found"}';
        }

        # 403 - Forbidden
        location @json_403 {
            default_type application/json;
            return 403 '{"status": "error", "message": "forbidden"}';
        }

        # 413 - Payload Too Large
        location @json_413 {
            default_type application/json;
            return 413 '{"status": "error", "message": "request body is too large"}';
        }

        # 500 - Internal Server Error
        location @json_500 {
            default_type application/json;
            return 500 '{"status": "error", "message": "internal server error"}';
        }

        # 502 - Bad Gateway (e.g., upstream crashed)
        location @json_502 {
            default_type application/json;
            return 502 '{"status": "error", "message": "bad gateway"}';
        }

        # 503 - Service Unavailable (e.g., maintenance or overload)
        location @json_503 {
            default_type application/json;
            return 503 '{"status": "error", "message": "service unavailable"}';
        }

        # 504 - Gateway Timeout (e.g., proxy_connect_timeout or proxy_read_timeout exceeded)
        location @json_504 {
            default_type application/json;
            return 504 '{"status": "error", "message": "gateway timeout"}';
        }
        # END OF JSON ERRORS

        location / {
            root /frontend_data;
            try_files $uri /index.html;
        }

        location /static_data/ {
                    root /;
        }

        location ~ ^/api/auth/.*internal.* {
            return 404;
        }

        location /api/auth/ {
#             proxy_pass http://auth_service:3000/;
            set $auth_target http://auth_service:3000;
            rewrite ^/api/auth(.*)$ $1 break;
            proxy_pass $auth_target;
            proxy_connect_timeout 30s; # how long proxy is waiting for the service to be connected
            proxy_read_timeout 10s; # how long proxy is wainting for response from the service
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/upload/ {
            #proxy_pass http://file_upload_service:3000/;
            set $auth_target http://file_upload_service:3000;
            rewrite ^/api/upload(.*)$ $1 break;
            proxy_pass $auth_target;
            proxy_connect_timeout 30s;
            proxy_read_timeout 60s;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy for /api/game/ (updated for REST + WebSocket)
        location /api/game/ {
            #proxy_pass http://game_service:3000/;
            set $auth_target http://game_service:3000;
            rewrite ^/api/game(.*)$ $1 break;
            proxy_pass $auth_target;
            proxy_connect_timeout 60s;
            proxy_read_timeout 30s; # set based on actual data exchange between the client and game
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /api/match/ {
            #proxy_pass http://match_service:3000/;
            set $auth_target http://match_service:3000;
            rewrite ^/api/match(.*)$ $1 break;
            proxy_pass $auth_target;
            proxy_connect_timeout 60s;
            proxy_read_timeout 30s; #set based on actual data exchange between the client and game
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /health {
            return 200 "Nginx is running";
            add_header Content-Type text/plain;
        }
    }
}