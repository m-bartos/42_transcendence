services:
  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    depends_on:
      - auth_service_db_init
    volumes:
      - auth_db_data:/auth_db_data
      - static_data:/static_data
    networks:
      - transcendence

  file_upload_service:
    build:
      context: ./file_upload_service
      dockerfile: Dockerfile
    container_name: file_upload_service
    volumes:
      - static_data:/static_data
    networks:
      - transcendence

  dashboard_service:
    build:
      context: ./dashboard_service
      dockerfile: Dockerfile
    container_name: dashboard_service
    volumes:
      - ./dashboard_service:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
      - dashboard_db_data:/dashboard_data
    networks:
      - transcendence

  dashboard_consumer_service:
    build:
      context: ./dashboard_consumer_service
      dockerfile: Dockerfile
    container_name: dashboard_consumer_service
    volumes:
      - ./dashboard_consumer_service:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
      - dashboard_db_data:/dashboard_data
    networks:
      - transcendence

  presence_service:
    build:
      context: ./presence_service
      dockerfile: Dockerfile.dev
    container_name: presence_service
    volumes:
      - ./presence_service:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
    networks:
      - transcendence

  friend_service:
    build:
      context: ./friend_service
      dockerfile: Dockerfile.dev
    container_name: friend_service
    volumes:
      - ./friend_service:/app
      - /app/node_modules #anonymous volume = for selective or overlapping binding - it maps container data to docker internal storage
      - friends_db_data:/friends_db_data
    networks:
      - transcendence

  auth_service_db_init:
    build:
      context: ./auth_service_db_init
      dockerfile: Dockerfile
    container_name: auth_service_db_init
    volumes:
      - auth_db_data:/auth_db_data
    networks:
      - transcendence

  game_service:
    build:
      context: ./game_service
      dockerfile: Dockerfile
    container_name: game_service
    networks:
      - transcendence

  rabbitmq_service:
    build:
      context: ./rabbitmq_service
      dockerfile: Dockerfile.dev
    container_name: rabbitmq_service
    ports:
      - "5672:5672"    # AMQP protocol port
      - "15672:15672"  # Management console port
    networks:
      - transcendence

  proxy_service:
    build:
      context: ./proxy_service
      dockerfile: Dockerfile
    container_name: proxy_service
    volumes:
      - frontend_data:/frontend_data
      - static_data:/static_data
    ports:
      - "80:80"
    networks:
      - transcendence

  frontend_service:
    build:
      context: ../client
      dockerfile: Dockerfile
    container_name: frontend_builder
    volumes:
      - /app/node_modules # anonymous volume -protect node_modules
      - frontend_data:/frontend_data # named volume for sharing frontend data with proxy_service
    command: >
      bash -c "npm run docker-build && npm run docker-build-css && cp -r /app/* /frontend_data/ && tail -f /dev/null"
    # build ts, css, copies data to named volume and keeps the container running!!!

networks:
  transcendence:
    driver: bridge


volumes:
  # auth service
  auth_db_data:
  # dashboard_service db:
  dashboard_db_data:
  # friends_service db:
  friends_db_data:
  # file uploads for file_upload and proxy_service
  static_data:
  # index data
  frontend_data: